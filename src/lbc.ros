#!/bin/sh
#|-*- mode:lisp -*-|#
#|
exec ros -Q -- $0 "$@"
|#
(progn ;;init forms
  (ros:ensure-asdf)
  (ql:quickload '(:quickutil :alexandria) :silent t)
;;   (qtlc:utilize
;;    :utilities '(:iota :riffle)
;;    :categories '(:alexandria)
;;    :symbols '(:split-sequence-if-not))
  )

(defpackage :ros.script.lbc.3744114298
  (:use :cl))
(in-package :ros.script.lbc.3744114298)

(defvar idx 1)

(defun emit-header ()
  (format t "define i32 @main() {
  %data = alloca i8*, align 8
  %ptr = alloca i8*, align 8
  %data_ptr = call i8* @calloc(i64 30000, i64 1)
  store i8* %data_ptr, i8** %data, align 8
  store i8* %data_ptr, i8** %ptr, align 8~%"))

(defun emit-move-ptr (diff)
  (format t "  %~D = load i8*, i8** %ptr, align 8~%" idx)
  (format t "  %~D = getelementptr inbounds i8, i8* %~D, i32 ~D~%" (+ idx 1) idx diff)
  (format t "  store i8* %~D, i8** %ptr, align 8~%" (+ idx 1))
  (incf idx 2))

(defun emit-add (diff)
  (format t "  %~D = load i8*, i8** %ptr, align 8~%" idx)
  (format t "  %~D = load i8, i8* %~D, align 1~%" (+ idx 1) idx)
  (format t "  %~D = add i8 %~D, ~D~%" (+ idx 2) (+ idx 1) diff)
  (format t "  store i8 %~D, i8* %~D, align 1~%" (+ idx 2) idx)
  (incf idx 3))

(defun emit-put ()
  (format t "  %~D = load i8*, i8** %ptr, align 8~%" idx)
  (format t "  %~D = load i8, i8* %~D, align 1~%" (+ idx 1) idx)
  (format t "  %~D = sext i8 %~D to i32~%" (+ idx 2) (+ idx 1))
  (format t "  %~D = call i32 @putchar(i32 %~D)~%" (+ idx 3) (+ idx 2))
  (incf idx 4))

(defun emit-footer ()
  (format t "  %~D = load i8*, i8** %data, align 8~%" idx)
  (format t "  call void @free(i8* %~D)~%" idx)
  (format t "  ret i32 0
}

declare i8* @calloc(i64, i64)
declare void @free(i8*)
declare i32 @putchar(i32)~%"))

(defun argv-check (argv)
  (assert (>= (length argv) 1)
          (argv)
          "Common Lisp Brainf*ck compiler.

Usage:
  lbc.ros test.bf")

  (let ((file (pop argv)))
    (assert (probe-file file)
          (argv)
          (format nil "~S is not found" file))
    file))

(defun main (&rest argv)
  (let ((file (argv-check argv)))
    (emit-header)
    (with-open-file (stream file)
                  (let (char)
                    (loop :while (setq char (read-char stream nil))
                          :do
                          (case char
                            (#\+ (emit-add 1))
                            (#\. (emit-put))))))
    (emit-footer)))
;;; vim: set ft=lisp lisp:
